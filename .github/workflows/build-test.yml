# Workflow that builds and tests the binary executable
name: Build and Test Binary

# Run on pushes to main branch and all pull requests to ensure binary builds work correctly
on:
  push:
    branches:
      - main
  pull_request:

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ (github.head_ref && github.ref) || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-test-binary:
    name: Build and test binary executable
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Build binary executable
        run: |
          ./build.sh --install-pyinstaller

      - name: Test binary startup without API key (should show error message)
        run: |
          # Test that binary shows appropriate error message without API key
          # Since the process is long-lived, we need to send it an exit command
          echo "/exit" | timeout 30s ./dist/openhands-cli 2>&1 | tee no_api_key_output.log || true

          # Check for the expected error message
          if grep -q "No API key found" no_api_key_output.log; then
            echo "✅ Binary correctly reports missing API key"
          else
            echo "❌ Binary did not report missing API key correctly"
            echo "Output was:"
            cat no_api_key_output.log
            exit 1
          fi
        timeout-minutes: 1

      - name: Test binary startup with dummy API key (should start successfully)
        env:
          LITELLM_API_KEY: dummy-ci-key
          LITELLM_MODEL: dummy-ci-model
        run: |
          # Test that binary starts successfully and shows welcome message
          # Send /exit command to gracefully exit the long-lived process
          echo -e "/exit" | timeout 30s ./dist/openhands-cli 2>&1 | tee startup_output.log || true

          # Check for successful startup indicators
          if grep -q "system_prompt.j2 not found" startup_output.log; then
            echo "❌ Binary has missing prompt file error"
            cat startup_output.log
            exit 1
          elif grep -q "Error setting up agent" startup_output.log && grep -q "system_prompt.j2" startup_output.log; then
            echo "❌ Binary has prompt file related errors"
            cat startup_output.log
            exit 1
          elif grep -q "Let's start building!" startup_output.log || grep -q "OpenHands CLI" startup_output.log; then
            echo "✅ Binary starts successfully and shows welcome message"
          else
            echo "❌ Binary did not start properly or show expected messages"
            echo "Output was:"
            cat startup_output.log
            exit 1
          fi

      - name: Test binary interactive commands
        env:
          LITELLM_API_KEY: dummy-ci-key
          LITELLM_MODEL: dummy-ci-model
        run: |
          # Test that binary responds to commands correctly
          # Send a few commands and then exit
          echo -e "/help\n/status\n/exit" | timeout 30s ./dist/openhands-cli 2>&1 | tee commands_output.log || true

          # Check for expected command responses
          if grep -q "Available commands:" commands_output.log || grep -q "help" commands_output.log; then
            echo "✅ Binary responds to /help command"
          else
            echo "❌ Binary did not respond to /help command properly"
            echo "Output was:"
            cat commands_output.log
            exit 1
          fi

          if grep -q "Status: Active" commands_output.log || grep -q "Session ID:" commands_output.log; then
            echo "✅ Binary responds to /status command"
          else
            echo "❌ Binary did not respond to /status command properly"
            echo "Output was:"
            cat commands_output.log
            exit 1
          fi

          if grep -q "Goodbye!" commands_output.log; then
            echo "✅ Binary exits gracefully with /exit command"
          else
            echo "❌ Binary did not exit gracefully"
            echo "Output was:"
            cat commands_output.log
            exit 1
          fi
